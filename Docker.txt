In frontend folder;
1. Create a file named Dockerfile:

    #For ReactJs
        FROM node:20-alpine
        WORKDIR /app
        COPY package.json package-lock.json ./
        RUN npm install
        COPY . .
        RUN npm run build
        EXPOSE 3000
        CMD ["npm", "start"]

2. In terminal for frontend;
    2.1. Go into the directory of frontend folder
    2.2. Run 'docker build -t frontend-image-name .'
    2.3. Run 'docker run --name frontend-container-name -p 8081:3000 -it -d frontend-image-name'
    2.4. Check for the frontend application at 'http://localhost:8081'

In backend folder;
1. Create a file named Dockerfile:

    #For springboot and postgress as backend(make neccesary changes of versions and other details according to the project)
        FROM openjdk:23-jdk
        WORKDIR /app
        COPY target/*.jar /app/app.jar
        ENTRYPOINT ["java", "-jar", "app.jar"]

2. Create a file named docker-compose.yml in the folder containing both frontend and backend:

    #For springboot and postgress as backend(make neccesary changes of versions and other details according to the project)
        version: '3.8'
            services:
            backend:
                container_name: backend
                image: openjdk:17-jdk
                build:
                context: ./RestApi_project
                dockerfile: Dockerfile
                ports:
                - "8084:8084"
                environment:
                - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/Courses
                - SPRING_DATASOURCE_USERNAME=postgres
                - SPRING_DATASOURCE_PASSWORD=saiveena 
                depends_on:
                - db
                networks:
                - app_network

            frontend:
                container_name: frontend
                build:
                context: ./ReactJs_Project
                dockerfile: Dockerfile
                ports:
                - "3000:3000"
                networks:
                - app_network
                depends_on:
                - backend

            db:
                container_name: postgres_db
                image: postgres:13
                environment:
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: saiveena
                POSTGRES_DB: Courses
                ports:
                - "5433:5432"
                volumes:
                - postgres_data:/var/lib/postgresql/data
                networks:
                - app_network

            networks:
            app_network:
                driver: bridge

            volumes:
            postgres_data:
                driver: local 

3. Run 'mvn clean install'(everytime you make any kind of change in docker files)

4. In terminal for backend;
    4.1. Go into the directory of backend folder
    4.2. Run 'docker compose build'
    4.3. Run 'docker compose up'
    4.4. Check for entire application at 'http://localhost:8081'(same frontend container created previously)