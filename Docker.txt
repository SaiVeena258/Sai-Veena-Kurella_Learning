In frontend folder;
1. Create a file named Dockerfile:

    #For ReactJs
        FROM node:20-alpine
        WORKDIR /app
        COPY package.json package-lock.json ./
        RUN npm install
        COPY . .
        RUN npm run build
        EXPOSE 3000
        CMD ["npm", "start"]

2. In terminal for frontend;
    2.1. Go into the directory of frontend folder
    2.2. Run 'docker build -t frontend-image-name .'
    2.3. Run 'docker run --name frontend-container-name -p 8081:3000 -it -d frontend-image-name'
    2.4. Check for the frontend application at 'http://localhost:8081'

In backend folder;
1. Create a file named Dockerfile:

    #For springboot and postgress as backend(make neccesary changes of versions and other details according to the project)
        FROM openjdk:23-jdk
        WORKDIR /app
        COPY target/*.jar /app/app.jar
        ENTRYPOINT ["java", "-jar", "app.jar"]

2. Create a file named docker-compose.yml:

    #For springboot and postgress as backend(make neccesary changes of versions and other details according to the project)
        version: '3.8'
        services:
        backend:
            image: restapiimage(backend image name)
            container_name: spring-boot-app
            ports:
            - "8083:8083"
            environment:
            SPRING_APPLICATION_NAME: RestApi_project
            SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/Courses
            SPRING_DATASOURCE_USERNAME: postgres
            SPRING_DATASOURCE_PASSWORD: saiveena
            SPRING_JPA_HIBERNATE_DDL_AUTO: update
            SPRING_JPA_SHOW_SQL: "true"
            SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: "true"
            depends_on:
            db:
            condition: service_healthy

        db:
            image: postgres:16
            container_name: postgres-db
            restart: always
            environment:
            POSTGRES_DB: Courses
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: saiveena
            ports:
            - "5432:5432"
            healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres -d Courses"]
            interval: 10s
            timeout: 5s
            retries: 5

        frontend:
            image: reactimage(frontend image name)
            container_name: react-frontend
            build:
            context: .
            dockerfile: Dockerfile
            ports:
            - "3000:3000"
            depends_on:
            - backend
            volumes:
            - .:/app
            - /app/node_modules  

3. Run 'mvn clean install'(everytime you make any kind of change in docker files)

4. In terminal for backend;
    4.1. Go into the directory of backend folder
    4.2. Run 'docker build -t backend-image-name .'
    4.3. Run 'docker-compose up'
    4.4. Check for entire application at 'http://localhost:8081'(same frontend container created previously)